os: linux
language: shell

stages:
  - name: Perform tests
  - name: Prepare artifact
    if: branch = master && type != cron
  - name: Deploy
    if: branch = master && type != cron  

services:
  - docker

install:
  - sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse"
  - sudo apt-get -qq update
  - sudo apt-get -t trusty-backports install shellcheck
  - sudo pip install awscli

jobs:
  include:
    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - mkdir /tmp/config-custom
        - docker pull almerhor/pylint:default
        - docker run --rm -v $(pwd):/pylint -v $(pwd)/test:/tmp/config-custom almerhor/pylint:default py/cloud_control_state_action_ec2.py requirements-custom.txt
    
    - stage: Perform tests
      dist: trusty
      language: java
      sudo: required
      addons:
        sonarcloud:
          organization: "alexa-cloud-control"
          token: 
            secure: "sG7FEK9tBqSJBSe9HhUWRVNqf2XIFz91W8ATTvkVDNTEuPiE7yNJjUtjrUawFG56shoyG0qbTIuBtDAqwi0du+YgsHCEdFYxMbmbTX+STK+EOagUMrqQG/Q3yzDPUNRCJ6L1txTlD+aMAa6VeQHBkuWmhCC1zN9kISt13+BJF7HHbF2S5o8bUPrseu78371pxcB9oD3ufIAGsUYXseZk3x/y3TSKgKzBoW00cqmovAZJhYacSrx01UhhvLFtuHFJrhTDqxZVoaodEXefFlyCH/4hAvspJsbZ3/JIPdRFr7cujmF06IoeDDDaJ4pdg1ST1SIXoJLzmIT7am5y7f2B6f8/osFol02ZXPmLveqEJnMAeu+2I724g2QZZenSMocyxprVX9L9u8VFahAPgmbN0ZbHIH8OtyFZd0DAlZ6+z42bq3SHE1hTKt185wp/+u85U2u2OxGaw4hmT57Q6GrYPWsMkbbYkfT/6gkFwYJ0/42vz6eWfrI8DbYBG+z6123azCBA/AVO2dtodbj3fwwTKLze3ZeZV+sRpFt8n3lVz+IYO9t8Z6nDcoVr7REMhj7b18FYrAPCVblKnCPqhNyTDt9I/f/hGxcmhGMMDenOBzovSeZC01gxyoCKd+M0TiVVUrhzW0ngKyH4ABsBsXX0Ggz1ZTKnwJpU9a2c4Ex7kuM="
      
      script:
        - sonar-scanner

    - stage: Perform tests
      script:
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-StateActionEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-StateActionEc2.yml
        - aws cloudformation validate-template --region ${terraform_region} --template-body file://Alexa-CC-StateActionEc2.yml

    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-StateActionEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-StateActionEc2.yml
        - docker pull almerhor/cfnlint:latest
        - docker run --rm -v $(pwd)/:/lintfiles almerhor/cfnlint -t Alexa-CC-StateActionEc2.yml

    - stage: Prepare artifact
      os: linux
      language: python
      python:
        - "3.6"
      script:
        - echo "Building package"
        - cd artifacts/scripts
        - chmod +x *.sh
        - ./env_prep.sh
        - cd ../..
        - echo "Send artifact to S3"
      deploy:
        - provider: s3
          bucket: "${artifact_bucket}"
          local_dir: artifacts/package
          skip_cleanup: true

    - stage: Deploy
      script:
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-StateActionEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-StateActionEc2.yml
      deploy:
        provider: cloudformation
        edge: true # use DPLv2
        access_key_id: ${AWS_ACCESS_KEY_ID}
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        capabilities: CAPABILITY_NAMED_IAM
        template: Alexa-CC-StateActionEc2.yml
        stack_name: Alexa-CC-StateActionEc2-Function
        region: ${terraform_region}
        wait: true
        promote: true
